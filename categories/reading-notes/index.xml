<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading notes on 人间一场大梦</title>
    <link>http://chenghao.monster/categories/reading-notes/</link>
    <description>Recent content in Reading notes on 人间一场大梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Sep 2020 09:19:47 +0100</lastBuildDate>
    
	<atom:link href="http://chenghao.monster/categories/reading-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>四：Javac 编译原理与 class 文件结构</title>
      <link>http://chenghao.monster/2020/java-compile/</link>
      <pubDate>Sat, 05 Sep 2020 09:19:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2020/java-compile/</guid>
      <description>JVM 让 Java 成为了一次编译，到处运行，具有平台无关性的高级语言。要让 Java 代码跑在 JVM 中少不了 Javac 编译器，它把人类能理解的 Java 源代码语言翻译成 JVM 容易理解的字节码（将 .java 文件转换成 .class 文件）。某种意义上来说，Javac 编译器的存在使 Java 语言向开发者屏蔽了很多与机器相关的细节，JVM 使 Java 语言的执行和平台无关，这才成就了 Java 的繁荣。
本篇以 《深入分析 Java Web 技术内幕》 第四章 Javac 编译原理 及第五章 深入 class 文件结构 的内容为参考，讲解 Javac 编译器的基本结构，Javac 的工作原理，class 文件结构等。
Javac 编译器的基本结构 Javac 编译器的作用就是将符合 Java 语言规范的源代码转化成符合 Java 虚拟机规范的 Java 字节码，是从一个语言规范到另一个语言规范的转化，这大概需要以下几个步骤：
   编译过程 步骤     词法分析过程 识别源代码中的语法关键词，形成 Token 流   语法分析过程 检查关键词组合是否符合 Java 语言规范，形成一个抽象语法树   语义分析过程 把一些难懂的、复杂的语法转化成更加简单的语法，形成一个注解过后的抽象语法树   字节码生成 根据注解过后的抽象语法树生成字节码    词法分析器 在 Javac 编译一个类之前，会先一个字节一个字节地读取源代码，找出其中的语法关键词，如 if、else、for、while 等，最后形成一些规范化的 Token 流，就像在人类语言中，分辨一句话中的动词、名词、标点符号等。</description>
    </item>
    
    <item>
      <title>三：深入分析 Java Web 中的中文编码问题</title>
      <link>http://chenghao.monster/2020/java-encode/</link>
      <pubDate>Sat, 29 Aug 2020 09:19:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2020/java-encode/</guid>
      <description>作为非英语国家程序员，编码问题是我们一直都绕不过去的一道坎。
本篇以 《深入分析 Java Web 技术内幕》 第三章 深入分析 Java Web 中的中文编码问题 的内容为参考，讲解常见的编码格式、Java 中的编解码、Java Web 中的编解码，及常见乱码问题分析等。
计算机中存储信息的最小单元是 1 个字节，即 8 bits，所以能表示的字符范围是 0~255 个，而我们人类的语言太多，表示这些语言的符号太多，因而必须要经过一些翻译工作，才能让计算机理解我们的语言。这个翻译工作就是从 char 到 byte 的编码过程。
常见的编码格式 ASCⅡ 码 使用一个字节的低 7 位表示，范围为 0~127 共 128 个，包括了英文大小写字母，数字及常用的数学符号。0~31 是控制字符如换行、回车、空字符等，32~126 是打印字符，127 为删除。
IOS-8859-1 ASCⅡ 码的 128 个字符显然是不够用的，ISO 组织在 ASCⅡ 码基础上扩展出 ISO-8859-1 至 ISO-8859-15，其中 ISO-8859-1 涵盖了大多数西欧语言字符，应用最广泛。ISO-8859-1 仍然是 单字节编码，总共能表示 256 个字符。
GB 2312 《信息交换用汉字编码字符集》，双字节编码，范围为 A1~F7，包含 682 个符号和 6763 个汉字。
GBK 《汉字内码扩展规范》扩展了 GB2312，加入更多的汉字，编码范围是 8140~FEFE，能表示 21003 个汉字，兼容 GB 2312。也就是说用 GB 2312 编码的汉字可以用 GBK 来解码且不会用乱码。</description>
    </item>
    
    <item>
      <title>二：深入分析 Java I/O 的工作机制</title>
      <link>http://chenghao.monster/2020/java-io/</link>
      <pubDate>Mon, 17 Aug 2020 09:19:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2020/java-io/</guid>
      <description>I/O 是任何编程语言都无法回避的问题，它是人机交互中机器获取和交换信息的主要渠道，可以说大部分 Web 应用系统的瓶颈都是 I/O 瓶颈。
本篇以 《深入分析 Java Web 技术内幕》 第二章 深入分析 Java I/O 的工作机制 的内容为参考，讲解 Java I/O 类库、磁盘 I/O、网络 I/O、NIO 工作机制等。
Java I/O 类库的基本架构 基于字节的 I/O 操作接口 无论是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，Java 中基于字节的 I/O 操作接口输入和输出分别是 InputStream 和 OutputStream，其类层次关系如下图所示。
需要明确的是，字节流从哪里读或是写入到哪里，操作数据的方式是可以组合使用的，如：
OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(new File(&amp;#34;pathName&amp;#34;)));基于字符的 I/O 操作接口 虽然 I/O 操作的都是字节，但我们在程序中通常都是操作字符，为了方便 JDK 也提供了一个直接写字符的 I/O 接口 Reader 和 Writer，这样我们就可以直接将字符写入到文件或者网络流去。
例如写字符的操作接口为 void write(char[] cbuf, int off, int len)
字节与字符的转化接口 字符在写入文件持久化或者网络传输之前，都需要先经过编码转换，下图中 InputStreamReader 就是从字节到字符的转化桥梁，在初始化时需要指定编码字符集，否则会采用操作系统默认的字符集，很可能出现乱码问题。具体的编码解码过程可以查看：三：深入分析 Java Web 中的中文编码问题</description>
    </item>
    
    <item>
      <title>一：深入 Web 请求过程</title>
      <link>http://chenghao.monster/2020/dns-cdn/</link>
      <pubDate>Sun, 26 Jul 2020 09:19:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2020/dns-cdn/</guid>
      <description>由于之前找工作，刚来上海挺多事，些久没写博客；至此打算新开一个 “学习录” 系列（以读书笔记和实战心得为主），记录自己 Java 学习路上的收获，共勉。
以 《深入分析 Java Web 技术内幕》 第一章 深入 Web 请求过程的内容为参考，此篇讲解游览器缓存、DNS 域名解析的过程和 CDN 工作机制。
游览器缓存 缓存可以减少游览器向服务器请求资源的次数，减少网络延时，加快页面响应速度，减少服务器压力。下图中 size 不为 0 的请求就是没有使用缓存。
Memory Cache 会将资源暂时缓存到内存中，在关闭游览器后会释放掉这部分内存空间。受限于计算机内存的大小，当内存使用率高的时候，资源大概率会被缓存到 Disk Cache，它可以长时效的在硬盘中缓存资源。
Cache-Control / Pragma 我们在游览一个页面时发现有异常，通常考虑的就是是不是游览器做的缓存，这个时候可以按 Ctrl + F5 来重新请求到没有缓存的页面。这个组合键会直接向目标 URL 发送请求，而不会使用游览器缓存的数据；它会在 HTTP 的请求头中增加一些请求头，告诉服务器我们要获取最新的数据而不是缓存（以此也可以跳过前端部署的缓存服务器）。
 对 HTTP 请求头不太熟悉的同学可以先参考下我的计网学习笔记：Net：计算机网络读书笔记。
 使用 Ctrl + F5 组合键后在 HTTP 请求头中增加了两项 Pragma:no-cache 和 Cache-Control:no-cache，其字段可选值如下表所示：
   可选值 说明     Private 所有内容都将被缓存，在响应头中设置   Private 内容只缓存到私有缓存中，在响应头中设置   no-cache 所有内容都不会被缓存，在请求头和响应头中设置   no-store 所有内容都不会被缓存到缓存或 Internet 临时文件中，在响应头中设置   must-revalidation/proxy-revalidation 如果设置的内容失效，请求必须发送到服务器 / 代理以进行重新验证，在请求头中设置   max-age=xxx 缓存的内容将在 xxx 秒后失效，这个选项只在 HTTP 1.</description>
    </item>
    
  </channel>
</rss>