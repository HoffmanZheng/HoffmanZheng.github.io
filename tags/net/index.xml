<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net on 人间一场大梦</title>
    <link>http://chenghao.monster/tags/net/</link>
    <description>Recent content in Net on 人间一场大梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Mar 2020 13:19:47 +0100</lastBuildDate>
    
	<atom:link href="http://chenghao.monster/tags/net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Net：运输层</title>
      <link>http://chenghao.monster/2020/net-tcp/</link>
      <pubDate>Thu, 12 Mar 2020 13:19:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2020/net-tcp/</guid>
      <description>本篇为Net：概述与应用层 续篇，《计算机网络自顶向下方法》 第三的读书笔记，主要介绍：TCP 协议、流量控制、UDP 协议 等。
运输层 TCP 报文段结构 下图显示了 TCP 报文段的结构，其首部包括源端口号和目的端口号，它被用于多路复用/分解来自或送到上层应用的数据。
 检验和字段（checksum field） 32 Bits 的序号字段和 32 Bits 的确认号字段，用来实现可靠数据传输服务 16 Bits 的接收窗口字段，用于流量控制 6 Bits 的 标志字段，ACK Bit 用于指示确认字段中的值是有效的，即该报文段包括一个对已被成功接收报文段的确认 。 RST、SYN 和 FIN 比特用于连接建立和拆除，  可靠数据传输 TCP 在 lP 不可靠的尽力而为服务之上创建了 一种 可靠数据传输服务，确保一个进程从其接收缓存中读出的数据流是无损坏、无间隔、非冗余和按序的数据流；即该字节流与连接的另 一方端系统发送出的字节流是完全相同 。 （丢包重传、超时重传）
通过 三次握手 来建立一条 TCP 连接：
 第一次握手：客户端通过向服务器发送一段含有同步标志（SYN = 1）的数据，向服务器请求建立连接，通过这个数据段，客户端告诉服务器，我想要和你通信，你可以使用哪个序列号作为起始数据段来回应我。 第二次握手：服务器收到客户端的请求后，为该 TCP 连接分配 TCP 缓存和变量，用一个带有确认应答（ACK）和同步序列号（SYN = 1）标志位的数据段响应客户端，也告诉服务器两件事情：1.我已经收到你的请求，你可以传输数据了。2.你要用那个数据段来回应我。 第三次握手：客户端收到这个数据段之后，也要给该连接分配缓存和变量，再发送一个确认应答，确认已经收到服务器的数据段。告诉服务器，我已经收到回复，现在可以传输实际数据了。  通过 四次挥手 来断开一条 TCP 连接：
 第一次，当客户端完成数据传输后，将控制位 FIN 置 1，提出停止 TCP 连接的请求。 第二次，服务器收到 FIN 后对其作出确认响应，确认这一方向上的 TCP 连接将关闭，将 ACK 置1。 第三次，由服务器再 提出反方向的关闭请求，将 FIN 置 1。 第四次，客户端对服务器的请求进行确认，将 ACK 置 1，双方关闭结束，释放用于该连接的所有资源。 为什么需要四次挥手：客户端在数据传输结束后发出连续释放的通知，待对方确认后进入半关闭状态；服务器在传输完最后一段数据后，也发出释放通知，待对方确认后再完全关闭 TCP 连接。  流量控制 每一侧主机都为 TCP 连接设置了接收缓存，接收到的数据会被放入接收缓存，相关的应用进程会从该缓存中读取数据。如果某应用程序 读取数据时相对缓慢，而发送方发送得太多 、 太快，发送的数据就会很容易地使该连接的接收缓存溢出 。</description>
    </item>
    
    <item>
      <title>Net：概述与应用层</title>
      <link>http://chenghao.monster/2020/net-http/</link>
      <pubDate>Thu, 27 Feb 2020 13:19:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2020/net-http/</guid>
      <description>本篇为 《计算机网络自顶向下方法》 前两章的读书笔记，主要介绍：网络分层模型、HTTP 协议、非持续连接和持续连接、报文格式、cookie 与 session、 FTP 协议、HTTPS 协议 等。
网络协议分层模型 ISO 提出的计算机网络 OSI（Open System Interconnection Reference Model） 七层模型：
TCP / IP 分层模型：
分层体系的优点：HTTP 协议不用担心数据丢失，也 不关注 TCP 从网络的数据丢失和乱序故障中恢复的细节。那是 TCP 以及协议栈较低层协议的工作。
应用层 现代网络应用有两种主流体系结构：客户 - 服务器体系结构 或 对等（P2P）体系结构。网络应用通过 socket 软件接口向网络发送报文 message 和从网络接收报文来实现在 不同端系统上的进程间的通信。
应用层协议定义了：
 换的报文类型，例如请求报文和响应报文 。 各种报文类型的语法，如报文中的各个字段及这些字段是如何描述的 。 字段的语义，即这些字段中包含的信息的含义 。 一个进程何时以及如何发送报文，对报文进行响应的规则。  HTTP 协议 Web 的应用层协议是超文本传输协议 (HyperText Transfer Protocol , HTTP) ，客户端和服务器端通过交换 HTTP 报文进行会话，HTTP 定义了这些报文的结构以及客户和服务器进行报文交换的方式。
HTTP 定义了 Web 客户向 Web 服务器请求 Web 页面的方式，以及服务器向客户传送 Web 页面的方式。HTTP 使用 TCP 作为它的支撑运输协议，TCP 为 HTTP 提供可靠数据传输服务。</description>
    </item>
    
  </channel>
</rss>