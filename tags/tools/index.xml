<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on 人间一场大梦</title>
    <link>https://nervousorange.github.io/tags/tools/</link>
    <description>Recent content in Tools on 人间一场大梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2019 23:37:47 +0100</lastBuildDate>
    
	<atom:link href="https://nervousorange.github.io/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maven：生命周期、插件及包管理</title>
      <link>https://nervousorange.github.io/2019/maven/</link>
      <pubDate>Sun, 29 Dec 2019 23:37:47 +0100</pubDate>
      
      <guid>https://nervousorange.github.io/2019/maven/</guid>
      <description>Maven 作为一个强大的项目管理工具，在项目清理、开发、部署时有着强大的功能。此外，Maven 还可以自动管理 Java 包的传递性依赖，解决包的依赖冲突并对依赖的 scope 进行控制。 本篇对其功能和用法做简单的介绍。
Maven 的生命周期 1. Maven 简介 Maven 是一个项目管理工具，它包含了一个项目对象模型（Project Object Model），反映在配置中，就是一个 pom.xml 文件。是一组标准集合，一个项目的生命周期、一个包依赖管理系统。
当我们使用 Maven 的时候，通过一个自定义的项目对象模型，pom.xml 来详细描述我们自己的项目。
2. Maven 的生命周期 Maven 有三个内置的构建生命周期：default生命周期处理你的项目开发，clean 生命周期负责清理，而 site  生命周期处理项目站点文档的创建。
具体的生命周期及其顺序可参见 Apache Maven 官方生命周期文档，在我们使用命令调动生命周期的时候，比如 mvn verify，它会按照顺序执行 verify 之前的每个默认的生命周期阶段。
3. Maven 中的插件 Maven 实际上只是 Maven 插件集合的核心框架。插件是大多数操作实际执行的地方，几乎可以想到的对项目的所有操作都是由 Maven 插件来执行的。
Maven 在某个生命周期中执行的职责与该阶段绑定的插件目标 plugin : goal 有关，插件的 goal 代表一个特定的任务。当 maven 的生命周期运行到插件所绑定的阶段时，便会运行该阶段内所声明的插件任务。
插件的配置可以参考 Apache Maven 官方插件配置指南，下图以 spotbugs 插件为例图示插件在 pom.xml 文件中的配置。
Maven 下的 Java 包管理 1.</description>
    </item>
    
    <item>
      <title>Git 与 Github 使用指北</title>
      <link>https://nervousorange.github.io/2019/git/</link>
      <pubDate>Thu, 26 Dec 2019 21:49:47 +0100</pubDate>
      
      <guid>https://nervousorange.github.io/2019/git/</guid>
      <description>本篇介绍实用的工具 Git 及 Github 的常用功能及其操作，如：代码的版本控制，远程备份，团队项目协作等。
Git 本地仓库 Git 工作流程：
0. 应用场景  代码版本管理 / 多版本代码开发 / 多版本代码合并  1. 安装 Git 参考伯克利课程 CS61b 中的教程安装 Git
2. 配置 Git git config --global user.name + 你的英文名 git config --global user.email + 你的邮箱 git config --global push.default simple git config --global core.quotepath false // 不会对0×80以上的字符进行quote，中文显示正常。 git config --global core.editor &amp;#34;vim&amp;#34; git config --global core.autocrlf input git config --global --list // 查看当前配置列表 vi ~/.gitconfig // 编辑配置文件 3.</description>
    </item>
    
  </channel>
</rss>