<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on 人间一场大梦</title>
    <link>http://chenghao.monster/tags/tools/</link>
    <description>Recent content in Tools on 人间一场大梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2019 23:37:47 +0100</lastBuildDate>
    
	<atom:link href="http://chenghao.monster/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maven：包管理与冲突解决</title>
      <link>http://chenghao.monster/2019/maven%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8E%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Sun, 29 Dec 2019 23:37:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2019/maven%E5%8C%85%E7%AE%A1%E7%90%86%E4%B8%8E%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</guid>
      <description>Maven 作为一个强大的项目管理工具，可以自动管理 Java 包的传递性依赖，解决包的依赖冲突并对依赖的 scope 进行控制。 本篇对其功能和用法做简单的介绍。
一、包管理的必要性  JVM 的作用就是执行一个类的字节码，当它需要加载一个新的类时，就会去 Classpath 中寻找这个类。包的 全限定类名 是包的唯一标识，当 Classpath 中出现（不同版本的）同名包时，JVM 会选择 Classpath中出现最早的包 进行加载（Classpath Hell）。 包的调用存在传递性依赖，即你所调用的包同时还调用了其他别的包，这会导致一个项目的实现需要调用相当数量的第三方包，使包的管理与更新成了一个很大的难题。（同时也使自己的代码在别人的机器上不能正常的运行）  二、Maven：包管理工具 1. 包的约定与语义化版本  Maven 收录了几乎所有的 Java 包保存在其远程的 中央仓库，并对包的 ID 给出了三个约定，分别为 Groupid、Artifactid、version ，用结构化的方式，把包分门别类的放到一起，实现了方便检索的目的。 同时，包的版本号受到了语义化版本控制规范   2. 自动化包管理  当在 pom.xml 中引入一个第三方包的时候，Maven 就知道去哪里下载了，并且把它的传递性依赖也同时下载至本地 ~\.m2。你可以删除该文件夹中的包，但在 maven 刷新 后，maven 会为你自动下载所需要的包，这也方便了在他人机器上跑自己的代码，或是在团队项目中便捷地管理所需要的包。 Maven 为包提供了三种 Scope：  compile、test、及 provided（只在编译有效，运行无效，适合运行时由他人提供 jar 包的场景）    三、Maven：包的冲突与解决 1. 包的冲突  当项目的不同位置调用了 不同版本 的某个类库时，就可能会发生包的冲突。因为 JVM 会自动调用在 Classpath 中出现的早的那个版本类库，导致运行时调用了错误版本的类库产生错误，同时我们也不能很好的去管理调用类库的版本。 常见的包冲突异常有：  NoSuchMethodError - AbstractMethodError - NoClassDefFoundError - ClassNotFoundError - LinkageError 等。    2.</description>
    </item>
    
    <item>
      <title>Git 与 Github 使用指北</title>
      <link>http://chenghao.monster/2019/git-%E4%B8%8E-github-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</link>
      <pubDate>Thu, 26 Dec 2019 21:49:47 +0100</pubDate>
      
      <guid>http://chenghao.monster/2019/git-%E4%B8%8E-github-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</guid>
      <description>本篇介绍实用的工具 Git 及 Github 的常用功能及其操作，如：代码的版本控制，远程备份，团队项目协作等。
一、Git 本地仓库 Git 工作流程：
0. 应用场景  代码版本管理 / 多版本代码开发 / 多版本代码合并  1. 安装 Git 参考伯克利课程 CS61b 中的教程安装 Git
2. 配置 Git git config --global user.name + 你的英文名 git config --global user.email + 你的邮箱 git config --global push.default simple git config --global core.quotepath false // 不会对0×80以上的字符进行quote，中文显示正常。 git config --global core.editor &amp;#34;code --wait&amp;#34; git config --global core.autocrlf input git config --global --list // 查看当前配置列表 vi ~/.</description>
    </item>
    
  </channel>
</rss>