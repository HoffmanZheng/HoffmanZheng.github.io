<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>component on 人间一场大梦</title>
    <link>https://nervousorange.github.io/tags/component/</link>
    <description>Recent content in component on 人间一场大梦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Aug 2021 13:19:47 +0100</lastBuildDate><atom:link href="https://nervousorange.github.io/tags/component/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入解析 Spring 架构与设计</title>
      <link>https://nervousorange.github.io/2021/java-spring/</link>
      <pubDate>Thu, 26 Aug 2021 13:19:47 +0100</pubDate>
      
      <guid>https://nervousorange.github.io/2021/java-spring/</guid>
      <description>Spring 在 Java 开发中，有着不可替代的作用和地位。Spring 的目标在于让 Java EE 的开发变得更容易，这也意味着 Spring 框架的使用也应该是容易的。相比与 EJB 模型引入的过度的复杂性，Spring 提供了 IoC 容器和 AOP 支持，来降低框架对应用的侵入性。在处理与现有优秀解决方案的关系时，Spring 不会与这些第三方的解决方案发生竞争，而是致力于为应用提供使用优秀方案的集成平台，真正地把 Spring 定位在应用平台的地位，使得自己成为一个兼容并包的开放体系。
本篇结合 《Spring技术内幕（第2版）》 从源代码的角度讲解 Spring 的各个主要功能模块的设计和实现原理。
IoC 容器的实现 如果每个对象都需要靠自身实现去获取它所 依赖 的对象，会引起代码的高度耦合并且难以测试。很多对象并不会经常发生变化，它们之间的相互依赖关系也是比较稳定的，不会随着应用的 运行状态 的改变而改变，这些特性使得这些对象依赖关系的建立和维护可以交由容器来统一完成。
IoC 容器的出现使得对象的依赖注入可以从代码中 解耦 出来，把对依赖的 控制权 从具体业务对象手中转交到平台或者框架中，有效地解决了面对对象系统设计的复杂性和系统的可测试性。
BeanFactory 对 IoC 容器的功能定义 以 BeanFactory 的实现类 XmlBeanFactory 为例，它继承了 DefaultListableBeanFactory 并在其基础上增加了功能，从名字上可以猜到，它是一个可以读取以 XML 文件方式定义的 BeanDefinition（管理了对象之间的相互依赖关系） 的 IoC 容器。
DefaultListableBeanFactory 是一个很重要的 IoC 实现，其他的 IoC 容器比如 ApplicationContext，也是通过持有或者扩展 DefaultListableBeanFactory 来获得基本的 IoC 容器的功能的。BeanDefinition 的信息来源被封装在 Resource 中，对 XML 文件定义信息的具体处理又委托给了 XmlBeanDefinitionReader 来实现。它们间相互关系的伪代码如下：</description>
    </item>
    
  </channel>
</rss>
